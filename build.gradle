subprojects {
    apply plugin: 'java'

    java.toolchain.languageVersion = JavaLanguageVersion.of(17)
    java.withSourcesJar()
    java.withJavadocJar()

    jar {
        from(rootProject.file("LICENSE")) {
            rename { "${it}_${mod_name}" }
        }
        manifest {
            attributes([
                    'Specification-Title'     : mod_name,
                    'Specification-Vendor'    : mod_author,
                    'Specification-Version'   : project.jar.archiveVersion,
                    'Implementation-Title'    : project.name,
                    'Implementation-Version'  : project.jar.archiveVersion,
                    'Implementation-Vendor'   : mod_author,
                    'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                    'Timestamp'              : System.currentTimeMillis(),
                    'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                    'Build-On-Minecraft'      : minecraft_version
            ])
        }
    }

    sourcesJar {
        from(rootProject.file("LICENSE")) {
            rename { "${it}_${mod_name}" }
        }
    }

    repositories {
        mavenCentral()
        maven {
            name = 'Sponge / Mixin'
            url = 'https://repo.spongepowered.org/repository/maven-public/'
        }
        maven {
            name = 'BlameJared Maven (JEI / CrT / Bookshelf)'
            url = 'https://maven.blamejared.com'
        }
        maven {
            // location of a maven mirror for JEI files, as a fallback
            name = "ModMaven"
            url = "https://modmaven.dev"
        }
        // Crystal Nest repository where Soul Fire'd is hosted.
        maven {
            name = "Crystal Nest"
            url = "https://maven.crystalnest.it"
        }
        // Fuzs repository where Soul Fire'd required dependency FCAP is hosted. Not needed since 1.21
        maven {
            name = "Fuzs Mod Resources"
            url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/"
        }
    }

    dependencies {
        implementation "it.crystalnest:soul-fire-d-common:$minecraft_version-$soul_fire_d_version"
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.encoding = 'UTF-8'
        it.options.getRelease().set(17)
    }

    processResources {
        def expandProps = [
                "version"                   : version,
                "group"                     : project.group, //Else we target the task's group.
                "minecraft_version"         : minecraft_version,
                "forge_version"             : forge_version,
                "forge_loader_version_range": forge_loader_version_range,
                "forge_version_range"       : forge_version_range,
                "minecraft_version_range"   : minecraft_version_range,
                "fabric_version"            : fabric_version,
                "fabric_loader_version"     : fabric_loader_version,
                "mod_name"                  : mod_name,
                "mod_author"                : mod_author,
                "mod_id"                    : mod_id,
                "mod_license"               : mod_license,
                "mod_description"           : project.mod_description,
                "soul_fire_d_version"       : soul_fire_d_version,
        ]

        filesMatching(['pack.mcmeta', 'fabric.mod.json', 'META-INF/mods.toml', '*.mixins.json']) {
            expand expandProps
        }
        inputs.properties(expandProps)
    }

    // Disables Gradle's custom module metadata from being published to maven. The
    // metadata includes mapped dependencies which are not reasonably consumable by
    // other mod developers.
    tasks.withType(GenerateModuleMetadata).configureEach {
        enabled = false
    }

//    def isForge = project.name == 'Forge'
//    def key =  System.getenv('CURSEFORGEKEY')
//    println key
//    if (project.name != 'Common') {
//        apply plugin: 'com.matthewprenger.cursegradle'
//        if (!isForge) apply plugin: 'fabric-loom'
//        def changelogFile = rootProject.file('CHANGELOG.md').text
//
//        curseforge {
//            apiKey = key
//            project {
//                id = project.projectId
//                releaseType = project.releaseType
//                changelogType = 'markdown'
//                changelog = changelogFile
//                addGameVersion project.minecraft_version
//                addGameVersion project.name
//                mainArtifact(isForge ? jar : remapJar)
//            }
//            options {
//                debug = false
//                forgeGradleIntegration = isForge
//            }
//        }
//    }
}